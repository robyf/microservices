extend type Query {
    # Lending account for current user
    lendingAccount: LendingAccount

    validCreditDecision(accountId: ID!): CreditDecision
}

extend type Mutation {
    createLendingAccount: LendingAccount

    createCreditDecision(accountId: ID!, income: Float!): CreditDecision
    acceptCreditDecision(accountId: ID!, creditDecisionId: ID!): CreditDecision
}

enum LendingAccountStatus {
    NEW
    ACTIVE
    FROZEN
    CLOSED
}

enum CreditDecisionStatus {
    PENDING
    APPROVED
    DECLINED
    EXPIRED
}

# A lending account.
type LendingAccount {
    # The account unique identifier.
    id: ID!
    # Status.
    status: LendingAccountStatus!
    # Current account balance.
    balance: Float!
}

type CreditDecision {
    id: ID!
    status: CreditDecisionStatus!
    positive: Boolean!
    amount: Float!
}
